<#
.SYNOPSIS
     Manage Mailbox Permissions for Users & Shared Mailboxes in Exchange Online

.DESCRIPTION
     This script is to be utilised to manage permissions on Shared & User mailboxes. Exchange Control Panel should not be used for the mapping of Full Access permissions.
	 
.Inputs

.Outputs
     N/A

.Link

.NOTES
     Generated On:  12/06/2019
     Last Modified: 01/04/2021
     Generated By: Edward Martin (EM)
	 Modified by: Conor Macmillan (CM)

     ==============================
     Start Changelog
     ==============================
     V1.0.0 EM
     -    Created initial script
	 V2.0.0 CM
	 -    Added support for multiple mailboxes 
     
     ==============================
     End Changelog
     ==============================
#>
$ErrorActionPreference = 'SilentlyContinue'
$WarningPreference = 'SilentlyContinue'

# Function to add permissions as required.
Function Add-MailPermission($UserEmail, $SharedMailbox, $Permissiom) {
    If (($Permission -eq 'FullAccess') -or ($Permission -eq 'ReadPermission')) {
        If (Get-MailboxPermission -Identity $SharedMailbox -User $UserEmail) {
            $RemovePermission = (Get-MailboxPermission -Identity $SharedMailbox -User $UserEmail).AccessRights
            Remove-MailboxPermission -Identity $SharedMailbox -User $UserEmail -AccessRights $RemovePermission -Confirm:$false
            WriteLog -LogLevel Info -Message "$UserEmail $Permission has been removed from $SharedMailbox to be re-applied."
        }
        Try {
            Add-MailboxPermission -Identity $SharedMailbox -User $UserEmail -AccessRights $Permission -InheritanceType All -AutoMapping $False | Out-Null
            WriteLog -LogLevel Info -Message "$Permission applied for $UserEmail to $SharedMailbox."
        }
        Catch {
            WriteLog -LogLevel Error -Message $_.Exception.Message
        }
    }
    ElseIf ($Permission -eq 'SendAs') {
        If (Get-RecipientPermission -Identity $SharedMailbox -Trustee $UserEmail) {
            $RemovePermission = (Get-RecipientPermission -Identity $SharedMailbox -Trustee $UserEmail).AccessRights
            Remove-RecipientPermission -Identity $SharedMailbox -Trustee $UserEmail -AccessRights $RemovePermission -Confirm:$false
            WriteLog -LogLevel Info -Message "$UserEmail $Permission permission has been removed from $SharedMailbox to be re-applied."
        }
        Try {
            Add-RecipientPermission -Identity $SharedMailbox -Trustee $UserEmail -AccessRights $Permission -Confirm:$false | Out-Null
            Set-Mailbox $SharedMailbox -MessageCopyForSentAsEnabled $true | Out-Null
            WriteLog -LogLevel Info -Message "$Permission applied for $UserEmail to $SharedMailbox."
        }
        Catch {
            WriteLog -LogLevel Error -Message $_.Exception.Message
        }
    }
    ElseIf ($Permission -eq 'SendOnBehalf') {
        Try {
            Set-Mailbox -Identity $SharedMailbox -GrantSendOnBehalfTo @{add=$UserEmail} -Confirm:$false | Out-Null
            Set-Mailbox $SharedMailbox -MessageCopyForSendOnBehalfEnabled $true | Out-Null
            WriteLog -LogLevel Info -Message "$Permission applied for $UserEmail to $SharedMailbox."
        }
        Catch {
            WriteLog -LogLevel Error -Message $_.Exception.Message
        }
    }
}

# Function to write to the console as logging.
Function WriteLog {
    Param([ValidateSet("Error", "Info", "Warning")][String]$LogLevel,[String]$Message)
    
    If ($LogLevel -eq 'Error') {
        Write-Host -ForegroundColor Red -BackgroundColor Black "ERROR - $Message"
    }
    ElseIf ($LogLevel -eq 'Warning') {
        Write-Host -ForegroundColor Yellow -BackgroundColor Black "Warning - $Message"
    }
    Else {
        Write-Host -ForegroundColor Green -BackgroundColor Black "Success - $Message"
    }
}
try {If(get-mailbox -identity servicedesk@cpfs.wa.gov.au){}}
catch {connect-exchangeonline}
$SharedMailboxes = Read-Host -Prompt 'Enter the Shared mailbox addresses, separated by commas'
$SharedMailboxes = $SharedMailboxes.Split(',')
$SharedMailboxAddresses = @()

ForEach ($SharedMailbox in $SharedMailboxes) {
    If ($SharedMailbox -like "*@*") {
        $SharedMailboxAddresses += $SharedMailbox
    }
    ElseIf ($SharedMailbox -notlike "*@*") {
		WriteLog -LogLevel Error -Message "$SharedMailbox is not an email address."
		Exit
    }
}

ForEach ($SharedMailbox in $SharedMailboxAddresses) {
	If(!(Get-Mailbox -Identity $SharedMailbox)) {
    WriteLog -LogLevel Error -Message "$SharedMailbox does not exist in Exchange Online."
    Exit
	}
}

$UserEmails = Read-Host -Prompt 'Enter the user emails or group names to add, separated by commas'
$UserEmails = $UserEmails.Split(',') 
$EmailAddresses = @()

ForEach ($UserEmail in $UserEmails) {
    If ($UserEmail -like "*@*") {
        $EmailAddresses += $UserEmail
    }
    ElseIf ($UserEmail -notlike "*@*") {
        $PromptDomain = Read-Host -Prompt "What domain is $UserEmail from? (CPFS/DHW/DSC)"
        If ($PromptDomain -like 'CPFS') {
            $GroupMembers = (Get-ADGroupMember -Identity $UserEmail -Server ad.dcd.wa.gov.au).samaccountname
            ForEach ($GroupMember in $GroupMembers) {
                $EmailAddresses += (Get-ADUser -Identity $GroupMember -Server ad.dcd.wa.gov.au -Property mail).mail
            }
        }
        ElseIf ($PromptDomain -like 'DHW') {
            $GroupMembers = (Get-ADGroupMember -Identity $UserEmail -Server dhw.wa.gov.au).samaccountname
            ForEach ($GroupMember in $GroupMembers) {
                $EmailAddresses += (Get-ADUser -Identity $GroupMember -Server dhw.dcd.wa.gov.au -Property mail).mail
            }
        }
        ElseIf ($PromptDomain -like 'DSC') {
            $GroupMembers = (Get-ADGroupMember -Identity $UserEmail -Server dsc.wa.gov.au).samaccountname
            ForEach ($GroupMember in $GroupMembers) {
                $EmailAddresses += (Get-ADUser -Identity $GroupMember -Server dsc.wa.gov.au -Property mail).mail
            }
        }
    }
}

$Permissions = Read-Host -Prompt 'Enter the access level (FullAccess / ReadPermission / SendAs / SendOnBehalf)'

$Permissions = $Permissions -Replace '\s',''
$Permissions = $Permissions.Split(',')

ForEach ($UserEmail in $EmailAddresses) {

	If(!(Get-Recipient -Identity $UserEmail)) {
		WriteLog -LogLevel Error -Message "$UserEmail does not exist in Exchange Online."
		Exit
	}
	ForEach ($SharedMailbox in $SharedMailboxAddresses) {
		ForEach ($Permission in $Permissions) {
			Add-MailPermission -UserEmail $UserEmail -SharedMailbox $SharedMailbox -Permission $Permission
		}
	}
}